plot(pca_result, choix = "var", main = "Análisis de Componentes Principales")
# Gráfico de dispersión para K-Means
plot(datos$completeObs, col = kmeans_result$cluster, main = "K-Means Clustering")
points(kmeans_result$centers, col = 1:num_clusters, pch = 8, cex = 2)
# Ajustar el tamaño de la ventana gráfica
par(mfrow=c(1, 1))
# Visualizar el dendrograma con colores personalizados
fviz_dend(hclust_result, main = "Dendrograma de Clustering Jerárquico", cex = 0.5)
# Simulación de datos para demostración
dista <- dist(tablasitios)
hclust_result <- hclust(dista, method="complete")
# Obtener los clusters
grupos <- cutree(hclust_result, k=3)
# Restar 1 para que los clusters se enumeren de 0 a (k-1)
grupos <- grupos - 1
calcular_centroides <- function(grupos, tablasitios) {
centroides <- sapply(unique(grupos), function(x) {
indices <- which(grupos == x)
mean(datos[indices, ], na.rm = TRUE)
})
return(centroides)
}
centroides <- calcular_centroides(grupos, datos)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
##Universidad Autonoma de Aguascalientes
## Departamento: Ciencias de la computacion
## Carrera : Ingenieria en computacion inteligente
##Prof. Francisco Javier Luna Rosas
##César Eduardo Elias del Hoyo ID: 262045
##José Luis Sandoval Pérez ID: 261731
##Diego Emanuel Saucedo Ortega ID: 261230
##Carlos Daniel Torres Macias ID: 244543
# Chunk 2: library
knitr::opts_chunk$set(echo = TRUE)
library(FactoMineR)
library(xml2)
library(rvest)
library(stringr)
library(utils)
library(easypackages)
libraries("dplyr",
"ggplot2",
"caret",
"tidyverse",
"tidytext",
"ROCR",
"pander",
"knitr",
"broom")
library(missMDA)
library(factoextra)
library(cluster)
library(maps)
library(cluster)
library(factoextra)
library(ggplot2)
# Chunk 3: extraer
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
patrimonios<-read_html("https://en.wikipedia.org/wiki/List_of_World_Heritage_in_Danger")
tablas<- html_table(patrimonios,fill=TRUE)
#extrayendo tabla de sitios
tablasitios <- tablas[[1]]
names(tablasitios)
#seleccionamos columnas y renombramos
tablasitios <- tablasitios[,c(1,3,4,6,7)]
dim(tablasitios)
names(tablasitios)
colnames(tablasitios) <-c("nombre","lcon","crit","year","endger")
tablasitios$nombre[1:3]
##definimos criterios natural o cultural
tablasitios$crit <-ifelse(str_detect(tablasitios$crit, "Natural")==T, "nat","cult")
tablasitios$crit[1:3]
##procesamos y limpiamos el año en que entro a lista
tablasitios$year <- as.numeric(tablasitios$year)
tablasitios$year[1:3]
length(tablasitios$year)
##limpiamos año que se declaro en peligro
tablasitios$endger
names(tablasitios)
tablasitios_acp <- tablasitios
##Obtenemos paises con expresiones regulares
reg <- "[[:alpha:] ]+(?=[[:digit:]])"
pais <-str_extract(tablasitios$lcon,regex(reg))
pais
pais[1] <- "Egypt"
pais[12] <- "Potosi"
pais[23] <- "Ukraine"
pais[24] <- "Ukraine"
pais[35] <- "Côte d'Ivoire / Guinea"
tablasitios$pais <- pais
names(tablasitios)
##obteniendo coordenadas
reg_y <- "[/][ -]*[[:digit:]]*[.]*[[:digit:]]*[;]"
reg_x <- "[;][ -]*[[:digit:]]*[.]*[[:digit:]]"
cordenadas_y <- str_extract(tablasitios$lcon,reg_y)
(cordenadas_y <- as.numeric(str_sub(cordenadas_y,3,-2)))
tablasitios$coorY <- cordenadas_y
cordenadasX<- str_extract(tablasitios$lcon,reg_x)
(cordenadasX <- as.numeric(str_sub(cordenadasX,3,-1)))
tablasitios$coorX <- cordenadasX
tablasitios$lcon <- NULL
round(tablasitios$coorY,2)[1:3]
round(tablasitios$coorX,2)[1:3]
dim(tablasitios)
pander(head(tablasitios))
names
par(oma=c(0,0,0,0))
par(mar=c(0,0,0,0))
pch <- ifelse(tablasitios$crit == "nat",19,2)
map("world",col="darkgray", lwd=.5,mar=c(0.1,0.1,0.1,0.1))
points(tablasitios$coorX,tablasitios$coorY,pch=pch,col="red",cex=.8)
box()
# Tratar valores faltantes
datos <- imputePCA(tablasitios[, c("coorX", "coorY", "year")])
# Aplicar ACP
pca_result <- PCA(datos$completeObs, graph = FALSE)
# Aplicar K-Means (asumiendo 3 clusters)
num_clusters <- 3
kmeans_result <- kmeans(datos$completeObs, centers = num_clusters)
# Aplicar clustering jerárquico
hclust_result <- hclust(dist(datos$completeObs), method = "complete")
# Visualización de resultados
# Gráfico de Componentes Principales (ACP)
plot(pca_result, choix = "var", main = "Análisis de Componentes Principales")
# Gráfico de dispersión para K-Means
plot(datos$completeObs, col = kmeans_result$cluster, main = "K-Means Clustering")
points(kmeans_result$centers, col = 1:num_clusters, pch = 8, cex = 2)
# Ajustar el tamaño de la ventana gráfica
par(mfrow=c(1, 1))
# Visualizar el dendrograma con colores personalizados
fviz_dend(hclust_result, main = "Dendrograma de Clustering Jerárquico", cex = 0.5)
# Simulación de datos para demostración
dista <- dist(tablasitios)
hclust_result <- hclust(dista, method="complete")
# Obtener los clusters
grupos <- cutree(hclust_result, k=3)
# Restar 1 para que los clusters se enumeren de 0 a (k-1)
grupos <- grupos - 1
calcular_centroides <- function(grupos, tablasitios) {
centroides <- sapply(unique(grupos), function(x) {
indices <- which(grupos == x)
mean(datos[indices, ], na.rm = TRUE)
})
return(centroides)
}
centroides <- calcular_centroides(grupos, tablasitios)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
##Universidad Autonoma de Aguascalientes
## Departamento: Ciencias de la computacion
## Carrera : Ingenieria en computacion inteligente
##Prof. Francisco Javier Luna Rosas
##César Eduardo Elias del Hoyo ID: 262045
##José Luis Sandoval Pérez ID: 261731
##Diego Emanuel Saucedo Ortega ID: 261230
##Carlos Daniel Torres Macias ID: 244543
# Chunk 2: library
knitr::opts_chunk$set(echo = TRUE)
library(FactoMineR)
library(xml2)
library(rvest)
library(stringr)
library(utils)
library(easypackages)
libraries("dplyr",
"ggplot2",
"caret",
"tidyverse",
"tidytext",
"ROCR",
"pander",
"knitr",
"broom")
library(missMDA)
library(factoextra)
library(cluster)
library(maps)
library(cluster)
library(factoextra)
library(ggplot2)
# Chunk 3: extraer
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
patrimonios<-read_html("https://en.wikipedia.org/wiki/List_of_World_Heritage_in_Danger")
tablas<- html_table(patrimonios,fill=TRUE)
#extrayendo tabla de sitios
tablasitios <- tablas[[1]]
names(tablasitios)
#seleccionamos columnas y renombramos
tablasitios <- tablasitios[,c(1,3,4,6,7)]
dim(tablasitios)
names(tablasitios)
colnames(tablasitios) <-c("nombre","lcon","crit","year","endger")
tablasitios$nombre[1:3]
##definimos criterios natural o cultural
tablasitios$crit <-ifelse(str_detect(tablasitios$crit, "Natural")==T, "nat","cult")
tablasitios$crit[1:3]
##procesamos y limpiamos el año en que entro a lista
tablasitios$year <- as.numeric(tablasitios$year)
tablasitios$year[1:3]
length(tablasitios$year)
##limpiamos año que se declaro en peligro
tablasitios$endger
names(tablasitios)
tablasitios_acp <- tablasitios
##Obtenemos paises con expresiones regulares
reg <- "[[:alpha:] ]+(?=[[:digit:]])"
pais <-str_extract(tablasitios$lcon,regex(reg))
pais
pais[1] <- "Egypt"
pais[12] <- "Potosi"
pais[23] <- "Ukraine"
pais[24] <- "Ukraine"
pais[35] <- "Côte d'Ivoire / Guinea"
tablasitios$pais <- pais
names(tablasitios)
##obteniendo coordenadas
reg_y <- "[/][ -]*[[:digit:]]*[.]*[[:digit:]]*[;]"
reg_x <- "[;][ -]*[[:digit:]]*[.]*[[:digit:]]"
cordenadas_y <- str_extract(tablasitios$lcon,reg_y)
(cordenadas_y <- as.numeric(str_sub(cordenadas_y,3,-2)))
tablasitios$coorY <- cordenadas_y
cordenadasX<- str_extract(tablasitios$lcon,reg_x)
(cordenadasX <- as.numeric(str_sub(cordenadasX,3,-1)))
tablasitios$coorX <- cordenadasX
tablasitios$lcon <- NULL
round(tablasitios$coorY,2)[1:3]
round(tablasitios$coorX,2)[1:3]
dim(tablasitios)
pander(head(tablasitios))
names
par(oma=c(0,0,0,0))
par(mar=c(0,0,0,0))
pch <- ifelse(tablasitios$crit == "nat",19,2)
map("world",col="darkgray", lwd=.5,mar=c(0.1,0.1,0.1,0.1))
points(tablasitios$coorX,tablasitios$coorY,pch=pch,col="red",cex=.8)
box()
# Tratar valores faltantes
datos <- imputePCA(tablasitios[, c("coorX", "coorY", "year")])
# Aplicar ACP
pca_result <- PCA(datos$completeObs, graph = FALSE)
# Aplicar K-Means (asumiendo 3 clusters)
num_clusters <- 3
kmeans_result <- kmeans(datos$completeObs, centers = num_clusters)
# Aplicar clustering jerárquico
hclust_result <- hclust(dist(datos$completeObs), method = "complete")
# Visualización de resultados
# Gráfico de Componentes Principales (ACP)
plot(pca_result, choix = "var", main = "Análisis de Componentes Principales")
# Gráfico de dispersión para K-Means
plot(datos$completeObs, col = kmeans_result$cluster, main = "K-Means Clustering")
points(kmeans_result$centers, col = 1:num_clusters, pch = 8, cex = 2)
# Ajustar el tamaño de la ventana gráfica
par(mfrow=c(1, 1))
# Visualizar el dendrograma con colores personalizados
fviz_dend(hclust_result, main = "Dendrograma de Clustering Jerárquico", cex = 0.5)
# Simulación de datos para demostración
dista <- dist(tablasitios)
hclust_result <- hclust(dista, method="complete")
# Obtener los clusters
grupos <- cutree(hclust_result, k=3)
# Restar 1 para que los clusters se enumeren de 0 a (k-1)
grupos <- grupos - 1
calcular_centroides <- function(grupos, tablasitios) {
centroides <- sapply(unique(grupos), function(x) {
indices <- which(grupos == x)
mean(tablasitios[indices, ], na.rm = TRUE)
})
return(centroides)
}
centroides <- calcular_centroides(grupos, tablasitios)
# Convertir los centroides a un marco de datos compatible con ggplot
centroids_df <- data.frame(
Cluster = rep(0:(length(centroides)-1), each = length(centroides)),
Centroid = apply(centroides, 1, function(x) paste(round(x, 2), collapse = ", "))
)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
##Universidad Autonoma de Aguascalientes
## Departamento: Ciencias de la computacion
## Carrera : Ingenieria en computacion inteligente
##Prof. Francisco Javier Luna Rosas
##César Eduardo Elias del Hoyo ID: 262045
##José Luis Sandoval Pérez ID: 261731
##Diego Emanuel Saucedo Ortega ID: 261230
##Carlos Daniel Torres Macias ID: 244543
# Chunk 2: library
knitr::opts_chunk$set(echo = TRUE)
library(FactoMineR)
library(xml2)
library(rvest)
library(stringr)
library(utils)
library(easypackages)
libraries("dplyr",
"ggplot2",
"caret",
"tidyverse",
"tidytext",
"ROCR",
"pander",
"knitr",
"broom")
library(missMDA)
library(factoextra)
library(cluster)
library(maps)
library(cluster)
library(factoextra)
library(ggplot2)
# Chunk 3: extraer
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
patrimonios<-read_html("https://en.wikipedia.org/wiki/List_of_World_Heritage_in_Danger")
tablas<- html_table(patrimonios,fill=TRUE)
#extrayendo tabla de sitios
tablasitios <- tablas[[1]]
names(tablasitios)
#seleccionamos columnas y renombramos
tablasitios <- tablasitios[,c(1,3,4,6,7)]
dim(tablasitios)
names(tablasitios)
colnames(tablasitios) <-c("nombre","lcon","crit","year","endger")
tablasitios$nombre[1:3]
##definimos criterios natural o cultural
tablasitios$crit <-ifelse(str_detect(tablasitios$crit, "Natural")==T, "nat","cult")
tablasitios$crit[1:3]
##procesamos y limpiamos el año en que entro a lista
tablasitios$year <- as.numeric(tablasitios$year)
tablasitios$year[1:3]
length(tablasitios$year)
##limpiamos año que se declaro en peligro
tablasitios$endger
names(tablasitios)
tablasitios_acp <- tablasitios
##Obtenemos paises con expresiones regulares
reg <- "[[:alpha:] ]+(?=[[:digit:]])"
pais <-str_extract(tablasitios$lcon,regex(reg))
pais
pais[1] <- "Egypt"
pais[12] <- "Potosi"
pais[23] <- "Ukraine"
pais[24] <- "Ukraine"
pais[35] <- "Côte d'Ivoire / Guinea"
tablasitios$pais <- pais
names(tablasitios)
##obteniendo coordenadas
reg_y <- "[/][ -]*[[:digit:]]*[.]*[[:digit:]]*[;]"
reg_x <- "[;][ -]*[[:digit:]]*[.]*[[:digit:]]"
cordenadas_y <- str_extract(tablasitios$lcon,reg_y)
(cordenadas_y <- as.numeric(str_sub(cordenadas_y,3,-2)))
tablasitios$coorY <- cordenadas_y
cordenadasX<- str_extract(tablasitios$lcon,reg_x)
(cordenadasX <- as.numeric(str_sub(cordenadasX,3,-1)))
tablasitios$coorX <- cordenadasX
tablasitios$lcon <- NULL
round(tablasitios$coorY,2)[1:3]
round(tablasitios$coorX,2)[1:3]
dim(tablasitios)
pander(head(tablasitios))
names
par(oma=c(0,0,0,0))
par(mar=c(0,0,0,0))
pch <- ifelse(tablasitios$crit == "nat",19,2)
map("world",col="darkgray", lwd=.5,mar=c(0.1,0.1,0.1,0.1))
points(tablasitios$coorX,tablasitios$coorY,pch=pch,col="red",cex=.8)
box()
# Tratar valores faltantes
datos <- imputePCA(tablasitios[, c("coorX", "coorY", "year")])
# Aplicar ACP
pca_result <- PCA(datos$completeObs, graph = FALSE)
# Aplicar K-Means (asumiendo 3 clusters)
num_clusters <- 3
kmeans_result <- kmeans(datos$completeObs, centers = num_clusters)
# Aplicar clustering jerárquico
hclust_result <- hclust(dist(datos$completeObs), method = "complete")
# Visualización de resultados
# Gráfico de Componentes Principales (ACP)
plot(pca_result, choix = "var", main = "Análisis de Componentes Principales")
# Gráfico de dispersión para K-Means
plot(datos$completeObs, col = kmeans_result$cluster, main = "K-Means Clustering")
points(kmeans_result$centers, col = 1:num_clusters, pch = 8, cex = 2)
# Ajustar el tamaño de la ventana gráfica
par(mfrow=c(1, 1))
# Visualizar el dendrograma con colores personalizados
fviz_dend(hclust_result, main = "Dendrograma de Clustering Jerárquico", cex = 0.5)
# Simulación de datos para demostración
dista <- dist(tablasitios)
hclust_result <- hclust(dista, method="complete")
# Obtener los clusters
grupos <- cutree(hclust_result, k=3)
calcular_centroides <- function(grupos, tablasitios) {
centroides <- sapply(unique(grupos), function(x) {
indices <- which(grupos == x)
mean(tablasitios[indices, ], na.rm = TRUE)
})
return(centroides)
}
centroides <- calcular_centroides(grupos, tablasitios)
# Convertir los centroides a un marco de datos compatible con ggplot
centroids_df <- data.frame(
Cluster = rep(0:(length(centroides)-1), each = length(centroides)),
Centroid = apply(centroides, 1, function(x) paste(round(x, 2), collapse = ", "))
)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
##Universidad Autonoma de Aguascalientes
## Departamento: Ciencias de la computacion
## Carrera : Ingenieria en computacion inteligente
##Prof. Francisco Javier Luna Rosas
##César Eduardo Elias del Hoyo ID: 262045
##José Luis Sandoval Pérez ID: 261731
##Diego Emanuel Saucedo Ortega ID: 261230
##Carlos Daniel Torres Macias ID: 244543
# Chunk 2: library
knitr::opts_chunk$set(echo = TRUE)
library(FactoMineR)
library(xml2)
library(rvest)
library(stringr)
library(utils)
library(easypackages)
libraries("dplyr",
"ggplot2",
"caret",
"tidyverse",
"tidytext",
"ROCR",
"pander",
"knitr",
"broom")
library(missMDA)
library(factoextra)
library(cluster)
library(maps)
library(cluster)
library(factoextra)
library(ggplot2)
# Chunk 3: extraer
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
patrimonios<-read_html("https://en.wikipedia.org/wiki/List_of_World_Heritage_in_Danger")
tablas<- html_table(patrimonios,fill=TRUE)
#extrayendo tabla de sitios
tablasitios <- tablas[[1]]
names(tablasitios)
#seleccionamos columnas y renombramos
tablasitios <- tablasitios[,c(1,3,4,6,7)]
dim(tablasitios)
names(tablasitios)
colnames(tablasitios) <-c("nombre","lcon","crit","year","endger")
tablasitios$nombre[1:3]
##definimos criterios natural o cultural
tablasitios$crit <-ifelse(str_detect(tablasitios$crit, "Natural")==T, "nat","cult")
tablasitios$crit[1:3]
##procesamos y limpiamos el año en que entro a lista
tablasitios$year <- as.numeric(tablasitios$year)
tablasitios$year[1:3]
length(tablasitios$year)
##limpiamos año que se declaro en peligro
tablasitios$endger
names(tablasitios)
tablasitios_acp <- tablasitios
##Obtenemos paises con expresiones regulares
reg <- "[[:alpha:] ]+(?=[[:digit:]])"
pais <-str_extract(tablasitios$lcon,regex(reg))
pais
pais[1] <- "Egypt"
pais[12] <- "Potosi"
pais[23] <- "Ukraine"
pais[24] <- "Ukraine"
pais[35] <- "Côte d'Ivoire / Guinea"
tablasitios$pais <- pais
names(tablasitios)
##obteniendo coordenadas
reg_y <- "[/][ -]*[[:digit:]]*[.]*[[:digit:]]*[;]"
reg_x <- "[;][ -]*[[:digit:]]*[.]*[[:digit:]]"
cordenadas_y <- str_extract(tablasitios$lcon,reg_y)
(cordenadas_y <- as.numeric(str_sub(cordenadas_y,3,-2)))
tablasitios$coorY <- cordenadas_y
cordenadasX<- str_extract(tablasitios$lcon,reg_x)
(cordenadasX <- as.numeric(str_sub(cordenadasX,3,-1)))
tablasitios$coorX <- cordenadasX
tablasitios$lcon <- NULL
round(tablasitios$coorY,2)[1:3]
round(tablasitios$coorX,2)[1:3]
dim(tablasitios)
pander(head(tablasitios))
names
par(oma=c(0,0,0,0))
par(mar=c(0,0,0,0))
pch <- ifelse(tablasitios$crit == "nat",19,2)
map("world",col="darkgray", lwd=.5,mar=c(0.1,0.1,0.1,0.1))
points(tablasitios$coorX,tablasitios$coorY,pch=pch,col="red",cex=.8)
box()
# Tratar valores faltantes
datos <- imputePCA(tablasitios[, c("coorX", "coorY", "year")])
# Aplicar ACP
pca_result <- PCA(datos$completeObs, graph = FALSE)
# Aplicar K-Means (asumiendo 3 clusters)
num_clusters <- 3
kmeans_result <- kmeans(datos$completeObs, centers = num_clusters)
# Aplicar clustering jerárquico
hclust_result <- hclust(dist(datos$completeObs), method = "complete")
# Visualización de resultados
# Gráfico de Componentes Principales (ACP)
plot(pca_result, choix = "var", main = "Análisis de Componentes Principales")
# Gráfico de dispersión para K-Means
plot(datos$completeObs, col = kmeans_result$cluster, main = "K-Means Clustering")
points(kmeans_result$centers, col = 1:num_clusters, pch = 8, cex = 2)
# Ajustar el tamaño de la ventana gráfica
par(mfrow=c(1, 1))
# Visualizar el dendrograma
fviz_dend(hclust_result, main = "Dendrograma de Clustering Jerárquico", cex = 0.5)
