#
plot(log(y + 1) ∼ x) #transformacion de y
# GRAFICOS EN R
# El comando plot()
x <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
y <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
plot(x,y,main="Titulo principal",sub="subtitulo",xlab="etiqueta eje x",ylab="Etiqueta eje y",xlim=c(-1,5),col="red")
#variaciones de plot
z <- cbind(x,y) # 2 columnas
z
plot(z)
# formula
plot(y ~ x, col="red") # x ∼ y se conoce como una formula en R
#
plot(log(y + 1) ~ x) #transformacion de y
plot(x,y,typle="p")
# GRAFICOS EN R
# El comando plot()
x <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
y <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
plot(x,y,main="Titulo principal",sub="subtitulo",xlab="etiqueta eje x",ylab="Etiqueta eje y",xlim=c(-1,5),col="red")
#variaciones de plot
z <- cbind(x,y) # 2 columnas
z
plot(z)
# formula
plot(y ~ x, col="red") # x ∼ y se conoce como una formula en R
#
plot(log(y + 1) ~ x) #transformacion de y
plot(x,y,typle="p")
# GRAFICOS EN R
# El comando plot()
x <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
y <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
plot(x,y,main="Titulo principal",sub="subtitulo",xlab="etiqueta eje x",ylab="Etiqueta eje y",xlim=c(-1,5),col="red")
#variaciones de plot
z <- cbind(x,y) # 2 columnas
z
plot(z)
# formula
plot(y ~ x, col="red") # x ∼ y se conoce como una formula en R
#
plot(log(y + 1) ~ x) #transformacion de y
plot(x,y,type="p")
# GRAFICOS EN R
# El comando plot()
x <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
y <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
plot(x,y,main="Titulo principal",sub="subtitulo",xlab="etiqueta eje x",ylab="Etiqueta eje y",xlim=c(-1,5),col="red")
#variaciones de plot
z <- cbind(x,y) # 2 columnas
z
plot(z)
# formula
plot(y ~ x, col="red") # x ∼ y se conoce como una formula en R
#
plot(log(y + 1) ~ x) #transformacion de y
plot(x,y,type="p")
plot(x,y,type="1")
# GRAFICOS EN R
# El comando plot()
x <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
y <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
plot(x,y,main="Titulo principal",sub="subtitulo",xlab="etiqueta eje x",ylab="Etiqueta eje y",xlim=c(-1,5),col="red")
#variaciones de plot
z <- cbind(x,y) # 2 columnas
z
plot(z)
# formula
plot(y ~ x, col="red") # x ∼ y se conoce como una formula en R
#
plot(log(y + 1) ~ x) #transformacion de y
plot(x,y,type="p")
plot(x,y,type="1")
# GRAFICOS EN R
# El comando plot()
x <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
y <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
plot(x,y,main="Titulo principal",sub="subtitulo",xlab="etiqueta eje x",ylab="Etiqueta eje y",xlim=c(-1,5),col="red")
#variaciones de plot
z <- cbind(x,y) # 2 columnas
z
plot(z)
# formula
plot(y ~ x, col="red") # x ∼ y se conoce como una formula en R
#
plot(log(y + 1) ~ x) #transformacion de y
plot(x,y,type="p")
plot(x,y,type="l")
plot(x,y,type="b") #puntos unidos por lineas
legend(1,4,c('uno','dos','tres')lty=1:3,col=c('red','blue','green')pch=15:17,cex=2)
legend(1,4,c('uno','dos','tres')lty=1:3,col=c("red","blue","green")pch=15:17,cex=2)
legend(1,4,c("uno","dos","tres")lty=1:3,col=c("red","blue","green")pch=15:17,cex=2)
legend(1,4,c("uno","dos","tres"),lty=1:3,col=c("red","blue","green")pch=15:17,cex=2)
legend(1,4,c("uno","dos","tres"),lty=1:3,col=c("red","blue","green"),pch=15:17,cex=2)
plot(c(1,5),c(1,5))
legend(1,4,c("uno","dos","tres"),lty=1:3,col=c("red","blue","green"),pch=15:17,cex=2)
# GRAFICOS EN R
# El comando plot()
x <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
y <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
plot(x,y,main="Titulo principal",sub="subtitulo",xlab="etiqueta eje x",ylab="Etiqueta eje y",xlim=c(-1,5),col="red")
#variaciones de plot
z <- cbind(x,y) # 2 columnas
z
plot(z)
# formula
plot(y ~ x, col="red") # x ∼ y se conoce como una formula en R
#
plot(log(y + 1) ~ x) #transformacion de y
plot(x,y,type="p")
plot(x,y,type="l") #lineas
plot(x,y,type="b") #puntos unidos por lineas
plot(c(1,5),c(1,5))
legend(1,4,c("uno","dos","tres"),lty=1:3,col=c("red","blue","green"),pch=15:17,cex=2)
plot(c(1,10),)
# GRAFICOS EN R
# El comando plot()
x <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
y <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
plot(x,y,main="Titulo principal",sub="subtitulo",xlab="etiqueta eje x",ylab="Etiqueta eje y",xlim=c(-1,5),col="red")
#variaciones de plot
z <- cbind(x,y) # 2 columnas
z
plot(z)
# formula
plot(y ~ x, col="red") # x ∼ y se conoce como una formula en R
#
plot(log(y + 1) ~ x) #transformacion de y
plot(x,y,type="p")
plot(x,y,type="l") #lineas
plot(x,y,type="b") #puntos unidos por lineas
plot(c(1,5),c(1,5))
legend(1,4,c("uno","dos","tres"),lty=1:3,col=c("red","blue","green"),pch=15:17,cex=2)
plot(c(1,10),)
# GRAFICOS EN R
# El comando plot()
x <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
y <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
plot(x,y,main="Titulo principal",sub="subtitulo",xlab="etiqueta eje x",ylab="Etiqueta eje y",xlim=c(-1,5),col="red")
#variaciones de plot
z <- cbind(x,y) # 2 columnas
z
plot(z)
# formula
plot(y ~ x, col="red") # x ∼ y se conoce como una formula en R
#
plot(log(y + 1) ~ x) #transformacion de y
plot(x,y,type="p")
plot(x,y,type="l") #lineas
plot(x,y,type="b") #puntos unidos por lineas
plot(c(1,5),c(1,5))
legend(1,4,c("uno","dos","tres"),lty=1:3,col=c("red","blue","green"),pch=15:17,cex=2)
plot(1:10,1:10,axes=FALSE,xlab="",ylab="")
polygon(runif(4,1,10),runif(4,1,10),col="lightblue")
polygon(runif(4,1,10),runif(4,1,10),col="lightblue")
polygon(runif(4,1,10),runif(4,1,10),col="lightblue")
polygon(runif(4,1,10),runif(4,1,10),col="lightblue")
polygon(runif(4,1,10),runif(4,1,10),col="lightblue")
polygon(runif(4,1,10),runif(4,1,10),col="lightblue")
polygon(runif(4,1,10),runif(4,1,10),col="lightblue")
plot(1:10,1:10,axes=FALSE,xlab="",ylab="")
polygon(runif(4,1,10),runif(4,1,10),col="lightblue")
points(runif(5,1,10),runif(5,1,10),cex=1.5,col="navyblue")
points(runif(5,1,10),runif(5,1,10),pch="+",cex=1.7,col="red")
lines(1:10,runif(10,1,10),lty=2,lwd=2)
text(runif(5,1,10),runif(5,1,10),labels=c("uno","dos","tres","cuatro","cinco"),cex=1.7,col=rainbow(5))
abline(h=5,lty=4)
tittle("Grafico variado")
tittle("Grafico variado")
title("Grafico variado")
axis(1,labels = c("uno","dos","tres","cuatro","cinco"),at = seq(1,10,by=2))
axis(2,labels = 1:10,at=1:10)
legend(8,3,lty=c(1:3),col=rainbow(3),legend = c("uno","dos","tres","cuatro","cinco"))
title("Grafico variado")
axis(1,labels = c("uno","tres","cinco","siente","nueve"),at = seq(1,10,by=2))
axis(2,labels = 1:10,at=1:10)
legend(8,3,lty=c(1:3),col=rainbow(3),legend = c("uno","dos","tres","cuatro","cinco"))
plot(1:10,1:10,axes=FALSE,xlab="",ylab="")
polygon(runif(4,1,10),runif(4,1,10),col="lightblue")
points(runif(5,1,10),runif(5,1,10),cex=1.5,col="navyblue")
points(runif(5,1,10),runif(5,1,10),pch="+",cex=1.7,col="red")
lines(1:10,runif(10,1,10),lty=2,lwd=2)
text(runif(5,1,10),runif(5,1,10),labels=c("uno","dos","tres","cuatro","cinco"),cex=1.7,col=rainbow(5))
abline(h=5,lty=4)
title("Grafico variado")
axis(1,labels = c("uno","tres","cinco","siente","nueve"),at = seq(1,10,by=2))
axis(2,labels = 1:10,at=1:10)
legend(8,3,lty=c(1:3),col=rainbow(3),legend = c("uno","dos","tres","cuatro","cinco"))
x <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
y <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
plot(x,y,type="n")
point(x,y,pch=3,col="red")
points(x,y,pch=3,col="red")
plot(c(1, 10), c(1, 3), type = 'n', axes = FALSE, xlab = '', ylab = '')
points(1:10, rep(1, 10), pch = 1:10, cex = 2, col = 'maroon2')
plot(c(1, 10), c(1, 3), type = 'n', axes = FALSE, xlab = '', ylab = '')
points(1:10, rep(1, 10), pch = 1:10, cex = 2, col='maroon2')
points(1:10, rep(1, 10), pch = 1:10, cex = 2, col='maroon2')
points(1:5, rep(3, 5), pch = 21:25, cex = 2, col='blue',bg="red")
par(mfrow=c(2,2)) ## define malla 2x2 para graficos
plot(rnorm(10))
plot(runif(5,rnorm(5)))
plot(runif(10))
plot(rnorm(10),rnorm(10))
VADeaths
barplot(VADeaths,beside=TRUE,legend=TRUE,ylim=c(0,90),ylab="muerte x cada 1000",main("Tasa mortalidad virginia"))
VADeaths
barplot(VADeaths,beside=TRUE,legend=TRUE,ylim=c(0,90),ylab="muerte x cada 1000",main=("TASA DE MORTALIDAD "))
VADeaths
barplot(VADeaths,beside=TRUE,legend=TRUE,ylim=c(0,90),ylab="muerte x cada 1000",main=("TASA DE MORTALIDAD "))
dotchart(VADeaths,xlim=c(0,75),xlab="muertes x cada 1000",main=("tasas de mortalidad virginia))
dotchart(VADeaths,xlim=c(0,75),xlab="muertes x cada 1000",main=("tasas de mortalidad virginia))
grupos <- c(18, 32, 10, 10)
etiquetas <- c('A', 'B', 'C', 'D', 'F')
pie(grupos, etiquetas, col=c('red', 'blue', 'green', 'yellow', 'orange'))
x<- rnorm(100)
hist(x,col="blue")
boxplot(sepal.length ~ species, data=iris,ylab="Largo sepalo (cm)", main="Medidas de la tabla iris",bowview=0.5,col="red)
boxplot(sepal.length ~ species, data=iris,ylab="Largo sepalo (cm)", main="Medidas de la tabla iris",bowview=0.5,col="red)
boxplot(sepal.length~species, data=iris,ylab="Largo sepalo (cm)", main="Medidas de la tabla iris",bowview=0.5,col="red)
boxplot(sepal.length~species, data=iris,ylab="Largo sepalo (cm)", main="Medidas de la tabla iris",bowview=0.5,col="red)
boxplot(sepal.Length ~ Species, data=iris,ylab="Largo sepalo (cm)", main="Medidas de la tabla iris",bowview=0.5,col="red)
boxplot(sepal.Length ~ Species, data=iris,ylab="Largo sepalo (cm)", main="Medidas de la tabla iris",bowview=0.5,col="red)
boxplot(Sepal.Length ~ Species, data=iris,ylab="Largo sepalo (cm)", main="Medidas de la tabla iris",bowview=0.5,col="red)
boxplot(Sepal.Length ~ Species, data=iris,ylab="Largo sepalo (cm)", main="Medidas de la tabla iris",bowview=0.5,col="red)
boxplot(Sepal.Length ~ Species, data=iris,ylab="Largo sepalo (cm)", main="Medidas de la tabla iris",boxvwex=0.5,col="red)
boxplot(Sepal.Length ~ Species, data=iris,ylab="Largo sepalo (cm)", main="Medidas de la tabla iris",boxvwex=0.5,col="red)
boxplot(Sepal.Length ~ Species, data=iris,ylab='Largo sepalo (cm)', main='Medidas de la tabla iris',boxvwex=0.5,col='red')
iris
head(iris)
tail(iris)
library(ellipse)
install.packages("ellipse")
iris
head(iris)
tail(iris)
library(ellipse)
correlation<-cor(iris,[,-5])
iris
head(iris)
tail(iris)
library(ellipse)
correlation<-cor(iris[,-5])
plotcorr(correlation,col='red')
correlation
iris
head(iris)
tail(iris)
library(ellipse)
correlation<-cor(iris[,-5])
plotcorr(correlation,col='rainbow')
iris
head(iris)
tail(iris)
library(ellipse)
correlation<-cor(iris[,-5])
plotcorr(correlation,col='blue')
correlation
install.packages("corrplot")
library(corrplot)
corrplot(correlation)
col<- colorRampPalette(c('#BB444' , 'rojo', 'verde' , 'azul'))
col<- colorRampPalette(c('yellow' , 'rojo', 'verde' , 'azul'))
col<- colorRampPalette(c('yellow' , 'red', 'green' , 'blue'))
corrplot(correlation,method='shade',shadecol='NA',tl.col='black',tl.srt=45,col=col(200),addCoef.col='black,order='AOE)
col<- colorRampPalette(c('yellow' , 'red', 'green' , 'blue'))
corrplot(correlation,method='shade',shadecol='NA',tl.col='black',tl.srt=45,col=col(200),addCoef.col='black',order='AQE')
col<- colorRampPalette(c('yellow' , 'red', 'green' , 'blue'))
corrplot(correlation,method='shade',shadecol='NA',tl.col='black',tl.srt=45,col=col(200),addCoef.col='black',order='AOE')
hist(iris$Sepal.Length,col=3)
hist(density(iris$Sepal.Length))
hist(density(iris$Sepal.Length))
hist(density(Iris$Sepal.Length))
pie(table(iris%Species))
plot(density(iris$Sepal.Length))
pie(table(iris%Species))
pie(table(iris$Species))
barplot(table(iris$species),col='blue')
barplot(table(iris$Species),col='blue')
boxplot(Sepal.Length ~ Species, data = iris, col = c('gray7', 'gray13', 'gray17'))
width(iris, plot(Sepal.Length, Sepal.width, col = Species, pch = as.numeric(Species)))
width(iris, plot(Sepal.Length, Sepal.width, col = Species, pch = as.numeric(Species)))
with(iris, plot(Sepal.Length, Sepal.width, col = Species, pch = as.numeric(Species)))
# GRAFICOS EN R
# El comando plot()
x <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
y <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
plot(x,y,main="Titulo principal",sub="subtitulo",xlab="etiqueta eje x",ylab="Etiqueta eje y",xlim=c(-1,5),col="red")
#variaciones de plot
z <- cbind(x,y) # 2 columnas
z
plot(z)
# formula
plot(y ~ x, col="red") # x ∼ y se conoce como una formula en R
#
plot(log(y + 1) ~ x) #transformacion de y
plot(x,y,type="p")
plot(x,y,type="l") #lineas
plot(x,y,type="b") #puntos unidos por lineas
plot(c(1,5),c(1,5))
legend(1,4,c("uno","dos","tres"),lty=1:3,col=c("red","blue","green"),pch=15:17,cex=2)
### Segundo dia
plot(1:10,1:10,axes=FALSE,xlab="",ylab="")
polygon(runif(4,1,10),runif(4,1,10),col="lightblue")
points(runif(5,1,10),runif(5,1,10),cex=1.5,col="navyblue")
points(runif(5,1,10),runif(5,1,10),pch="+",cex=1.7,col="red")
lines(1:10,runif(10,1,10),lty=2,lwd=2)
text(runif(5,1,10),runif(5,1,10),labels=c("uno","dos","tres","cuatro","cinco"),cex=1.7,col=rainbow(5))
abline(h=5,lty=4)
title("Grafico variado")
axis(1,labels = c("uno","tres","cinco","siente","nueve"),at = seq(1,10,by=2))
axis(2,labels = 1:10,at=1:10)
legend(8,3,lty=c(1:3),col=rainbow(3),legend = c("uno","dos","tres","cuatro","cinco"))
#Tipos de puntos en un plot con los comandos plot:pch,col,
x <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
y <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
plot(x,y,type="n")
points(x,y,pch=3,col="red")
# tipos de puntos
plot(c(1, 10), c(1, 3), type = 'n', axes = FALSE, xlab = '', ylab = '')
points(1:10, rep(1, 10), pch = 1:10, cex = 2, col='maroon2')
points(1:10, rep(1, 10), pch = 1:10, cex = 2, col='maroon2')
points(1:5, rep(3, 5), pch = 21:25, cex = 2, col='blue',bg="red")
#malla
par(mfrow=c(2,2)) ## define malla 2x2 para graficos
plot(rnorm(10))
plot(runif(5,rnorm(5)))
plot(runif(10))
plot(rnorm(10),rnorm(10))
VADeaths
barplot(VADeaths,beside=TRUE,legend=TRUE,ylim=c(0,90),ylab="muerte x cada 1000",main=("TASA DE MORTALIDAD "))
dotchart(VADeaths,xlim=c(0,75),xlab="muertes x cada 1000",main=("tasas de mortalidad virginia))
## dia 3
grupos <- c(18, 32, 10, 10)
etiquetas <- c('A', 'B', 'C', 'D', 'F')
pie(grupos, etiquetas, col=c('red', 'blue', 'green', 'yellow', 'orange'))
#histograma
x<- rnorm(100)
hist(x,col="blue")
# GRAFICOS EN R
# El comando plot()
x <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
y <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
plot(x,y,main="Titulo principal",sub="subtitulo",xlab="etiqueta eje x",ylab="Etiqueta eje y",xlim=c(-1,5),col="red")
#variaciones de plot
z <- cbind(x,y) # 2 columnas
z
plot(z)
# formula
plot(y ~ x, col="red") # x ∼ y se conoce como una formula en R
#
plot(log(y + 1) ~ x) #transformacion de y
plot(x,y,type="p")
plot(x,y,type="l") #lineas
plot(x,y,type="b") #puntos unidos por lineas
plot(c(1,5),c(1,5))
legend(1,4,c("uno","dos","tres"),lty=1:3,col=c("red","blue","green"),pch=15:17,cex=2)
### Segundo dia
plot(1:10,1:10,axes=FALSE,xlab="",ylab="")
polygon(runif(4,1,10),runif(4,1,10),col="lightblue")
points(runif(5,1,10),runif(5,1,10),cex=1.5,col="navyblue")
points(runif(5,1,10),runif(5,1,10),pch="+",cex=1.7,col="red")
lines(1:10,runif(10,1,10),lty=2,lwd=2)
text(runif(5,1,10),runif(5,1,10),labels=c("uno","dos","tres","cuatro","cinco"),cex=1.7,col=rainbow(5))
abline(h=5,lty=4)
title("Grafico variado")
axis(1,labels = c("uno","tres","cinco","siente","nueve"),at = seq(1,10,by=2))
axis(2,labels = 1:10,at=1:10)
legend(8,3,lty=c(1:3),col=rainbow(3),legend = c("uno","dos","tres","cuatro","cinco"))
#Tipos de puntos en un plot con los comandos plot:pch,col,
x <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
y <-runif(50,0,4) #50 numeros que siguen la normal entre 0-50
plot(x,y,type="n")
points(x,y,pch=3,col="red")
# tipos de puntos
plot(c(1, 10), c(1, 3), type = 'n', axes = FALSE, xlab = '', ylab = '')
points(1:10, rep(1, 10), pch = 1:10, cex = 2, col='maroon2')
points(1:10, rep(1, 10), pch = 1:10, cex = 2, col='maroon2')
points(1:5, rep(3, 5), pch = 21:25, cex = 2, col='blue',bg="red")
#malla
par(mfrow=c(2,2)) ## define malla 2x2 para graficos
plot(rnorm(10))
plot(runif(5,rnorm(5)))
plot(runif(10))
plot(rnorm(10),rnorm(10))
VADeaths
barplot(VADeaths,beside=TRUE,legend=TRUE,ylim=c(0,90),ylab="muerte x cada 1000",main=("TASA DE MORTALIDAD "))
dotchart(VADeaths,xlim=c(0,75),xlab="muertes x cada 1000",main=("tasas de mortalidad virginia))
## dia 3
grupos <- c(18, 32, 10, 10)
etiquetas <- c('A', 'B', 'C', 'D', 'F')
pie(grupos, etiquetas, col=c('red', 'blue', 'green', 'yellow', 'orange'))
#histograma
x<- rnorm(100)
hist(x,col='blue')
##diagrama cajas
boxplot(Sepal.Length ~ Species, data=iris,ylab='Largo sepalo (cm)', main='Medidas de la tabla iris',boxvwex=0.5,col='red')
iris
head(iris)
tail(iris)
library(ellipse)
correlation<-cor(iris[,-5])
plotcorr(correlation,col='blue') ## mas correlacion eliptica
correlation
## otro tipo de figura
library(corrplot)
corrplot(correlation)
col<- colorRampPalette(c('yellow' , 'red', 'green' , 'blue'))
corrplot(correlation,method='shade',shadecol='NA',tl.col='black',tl.srt=45,col=col(200),addCoef.col='black',order='AOE')
##
hist(iris$Sepal.Length,col=3)
plot(density(iris$Sepal.Length))
pie(table(iris$Species))
barplot(table(iris$Species),col='blue')
boxplot(Sepal.Length ~ Species, data = iris, col = c('gray7', 'gray13', 'gray17'))
with(iris, plot(Sepal.Length, Sepal.width, col = Species, pch = as.numeric(Species)))
pairs(iris)
pairs(iris[1:4], main = 'Datos de iris', pch = 21, bg = c('red', 'green', 'blue')[unclass(iris$Species)])
with(iris, plot(Sepal.Length, Sepal.width, col = Species, pch = as.numeric(Species)))
pairs(iris)
pairs(iris[1:4], main = 'Datos de iris', pch = 21, bg = c('red', 'green', 'blue')[unclass(iris$Species)])
pairs(iris)
pairs(iris[1:4], main = 'Datos de iris', pch = 21, bg = c('red', 'green', 'blue')[unclass(iris$Species)])
pairs(iris)
pairs(iris[1:4], main = 'Datos de iris', pch = 21, bg = c('red', 'green', 'blue')[unclass(iris$Species)])
pairs(iris)
pairs(iris[1:4], main = 'Datos de iris', pch = 21, bg = c('red', 'green', 'blue')[unclass(iris$Species)])
pairs(iris)
pairs(iris)
boxplot(Sepal.Length ~ Species, data = iris, col = c('gray7', 'gray13', 'gray17'))
with(iris, plot(Sepal.Length, Sepal.width, col = Species, pch = as.numeric(Species)))
boxplot(Sepal.Length ~ Species, data = iris, col = c('gray7', 'gray13', 'gray17'))
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(caret)
library(e1071)
library(tidyverse)
# Define la ruta al archivo CSV
ruta_archivo <- "C:/Users/josee/OneDrive/Escritorio/College/UAA/ICI/Sexto Semestre/Aprendizje Inteligente/iris.csv"
# Lee el archivo CSV desde la ruta especificada
datos <- read.table(file=ruta_archivo,sep = ";", header = TRUE, dec = ".", quote = "", fill = TRUE)
print(dim(datos))
print(head(datos))
X <- datos[, 1:4]
print(head(X))
Y <- datos[, 5]
print(head(Y))
# Separar los datos con el 70% de los datos para entrenamiento y el 30% para el testing
set.seed(0)
indices <- createDataPartition(Y, p = 0.7, list = FALSE)
train_data <- datos[indices, ]
test_data <- datos[-indices, ]
# Convertir la variable objetivo en factor con los mismos niveles en ambos conjuntos de datos
train_data$Y <- factor(train_data$Y, levels = levels(test_data$Y))
# Define la ruta al archivo CSV
ruta_archivo <- "C:/Users/josee/OneDrive/Escritorio/College/UAA/ICI/Sexto Semestre/Aprendizje Inteligente/iris.csv"
# Lee el archivo CSV desde la ruta especificada
datos <- read.table(file=ruta_archivo,sep = ";", header = TRUE, dec = ".", quote = "", fill = TRUE)
datos
# Define la ruta al archivo CSV
ruta_archivo <- "C:/Users/josee/OneDrive/Escritorio/College/UAA/ICI/Sexto Semestre/Aprendizje Inteligente/iris.csv"
# Lee el archivo CSV desde la ruta especificada
datos <- read.table(file=ruta_archivo,sep = ";", header = TRUE, dec = ".", quote = "", fill = TRUE)
head(datos)
# Define la ruta al archivo CSV
ruta_archivo <- "C:/Users/josee/OneDrive/Escritorio/College/UAA/ICI/Sexto Semestre/Aprendizje Inteligente/iris.csv"
# Lee el archivo CSV desde la ruta especificada
datos <- read.table(file=ruta_archivo,sep = ";", header = TRUE, dec = ".", quote = "", fill = TRUE)
head(datos)
muestra <- sample(1:150, 30)
# Define la ruta al archivo CSV
ruta_archivo <- "C:/Users/josee/OneDrive/Escritorio/College/UAA/ICI/Sexto Semestre/Aprendizje Inteligente/iris.csv"
# Lee el archivo CSV desde la ruta especificada
datos <- read.table(file=ruta_archivo,sep = ";", header = TRUE, dec = ".", quote = "", fill = TRUE)
head(datos)
muestra <- sample(1:150, 30)
muestra
install.packages("nnet")
# Instalación y carga de paquetes si es necesario
if (!requireNamespace("e1071", quietly = TRUE)) {
install.packages("e1071")
}
library(e1071)
# Establecer directorio de trabajo y cargar datos
setwd("C:/Users/josee/OneDrive/Escritorio/College/UAA/ICI/Sexto Semestre/Aprendizje Inteligente")
datos <- read.csv("iris.csv", sep = ";", dec = ".", header = TRUE)
# Definir función para calcular error
calcular_error <- function(muestra) {
ttesting <- datos[muestra,]
taprendizaje <- datos[-muestra,]
# Crear modelo Naive Bayes
modelo <- naiveBayes(tipo ~ ., data = taprendizaje)
# Realizar predicciones
prediccion <- predict(modelo, ttesting[, -5])
# Calcular matriz de confusión
MC <- table(ttesting[, 5], prediccion)
# Calcular porcentaje de buena clasificación
acierto <- (sum(diag(MC)) / sum(MC))
# Calcular error
error <- 1 - acierto
return(error)
}
# Realizar 10 iteraciones y almacenar errores
errores <- numeric(10)
for (i in 1:10) {
muestra <- sample(1:150, 45)  # Ajusta el rango de acuerdo a la cantidad de filas en tus datos
errores[i] <- calcular_error(muestra)
}
# Graficar errores
plot(1:10, errores, type = "b", xlab = "Iteración", ylab = "Error", main = "Error en 10 iteraciones")
